
@Data
@Configuration
public class SwaggerConfig {

    @Value("${swagger.basepackage}")
    private String basePackage;

    @Value("${service.contact.name}")
    private String contact;

    @Value("${service.contact.email}")
    private String contactEmail;

    @Value("${service.description}")
    private String description;

    @Autowired
    private Environment environment;

    @Autowired
    private ServletContext servletContext;

    @Value("${service.title}")
    private String title;

    @Value("${service.version}")
    private String version;

    @Value("${service}")
    private String documentationTitle;

    @Value("${service.documentation")
    private String documentationUrl;

    private String validateBasePackage() {
        return StringUtils.isNotEmpty(basePackage) ? basePackage : "com.jpmc.ccb.customeridentity.*";
    }

    @Bean
    public OpenAPI customOpenAPI(@Value("${service.version}") String appVersion) {
        return new OpenAPI()
                .addSecurityItem(new SecurityRequirement().addList("Authentication"))
                .components(new Components().addSecuritySchemes("Authentication", createAPIKeyScheme()))
                .info(new Info()
                        .title(title)
                        .version(version)
                        .contact(new Contact().name(contact).email(contactEmail))
                        .description(description)
                )
                .externalDocs(new ExternalDocumentation()
                        .description(documentationTitle)
                        .url(documentationUrl)
                );
    }

    private SecurityScheme createAPIKeyScheme() {
        return new SecurityScheme().type(SecurityScheme.Type.HTTP)
                .bearerFormat("JWT")
                .scheme("bearer");
    }


    private Set<String> getSchemes() {
        Set<String> schemes = new HashSet<>();
        if (isLocalProfile()) {
            schemes.add("http");
        } else {
            schemes.add("https");
        }
        return schemes;
    }

    private boolean isLocalProfile() {
        boolean localProfile = false;
        String[] activeProfiles = environment.getActiveProfiles();
        if (Arrays.stream(activeProfiles).anyMatch(p -> p.contains("local"))) {
            localProfile = true;
        }
        return localProfile;
    }

    public String join(String... args) {
        return Arrays.stream(args).map(this::isNullSafe).collect(Collectors.joining("/"));
    }

    public String isNullSafe(String str) {
        return (StringUtils.isBlank(str)) ? "" : str;
    }
}
